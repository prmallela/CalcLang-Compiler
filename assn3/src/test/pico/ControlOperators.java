// This file is auto-generated by pico-ops.py
// from pico-ops.yaml -- best edit it there.
package pico;
import org.junit.*;
import org.junit.rules.Timeout;
import static pico.Assertions.assertStack;

/** These operators provide conditional and repeated execution, like the
conditials and loops in most languages. They make heavy use of blocks
to defer computation.
 */
public class ControlOperators {
    @Rule
    public Timeout globalTimeout = Timeout.seconds(5);

    /** Execute a block if a Boolean value is true. */
    @Test
    public void test_if() {
        // auto-generated from pico-ops.yaml
        assertStack("(OK) true {(Yea)} if", "OK", "Yea");
        assertStack("(OK) false {(Yea)} if", "OK");
    }

    /** Execute one block if true, another block if false. */
    @Test
    public void test_ifelse() {
        // auto-generated from pico-ops.yaml
        assertStack("(OK) true {(Yea)} {(Nay)} ifelse", "OK", "Yea");
        assertStack("(OK) false {(Yea)} {(Nay)} ifelse", "OK", "Nay");
    }

    /** Execute a block a fixed number of times. The example starts with 1
and doubles it ten times, producing $2^{10}=1024$.
 */
    @Test
    public void test_repeat() {
        // auto-generated from pico-ops.yaml
        assertStack("1 10 {2 mul} repeat", "1024");
    }

    /** Implement a counting loop that provides its counter on the top of
the stack each time it executes the block. The example adds all the
odd numbers between 1 and 100: $1+3+5+7+\dots+97+99$.
 */
    @Test
    public void test_for() {
        // auto-generated from pico-ops.yaml
        assertStack("0 1 2 100 {add} for", "2500");
    }

    /** Takes two blocks -- the first is a Boolean-producing expression
that tells us whether to continue executing the second block.
This is *not* part of Postscript, which instead uses `loop` and
`exit` (like `break` in C/C++/Java).
 */
    @Test
    public void test_while() {
        // auto-generated from pico-ops.yaml
        assertStack("1 {dup 1000 lt} {2 mul} while", "1024");
    }
}
