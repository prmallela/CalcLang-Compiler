// This file is auto-generated by pico-ops.py
// from pico-ops.yaml -- best edit it there.
package pico;
import org.junit.*;
import org.junit.rules.Timeout;
import static pico.Assertions.assertStack;

/** Picoscript has distinct Boolean values which can be generated
by the operators `true` and `false`.
 */
public class RelationalOperators {
    @Rule
    public Timeout globalTimeout = Timeout.seconds(5);

    /** Produce the Boolean value *true*. */
    @Test
    public void test_true() {
        // auto-generated from pico-ops.yaml
        assertStack("true", "true");
    }

    /** Produce the Boolean value *false*. */
    @Test
    public void test_false() {
        // auto-generated from pico-ops.yaml
        assertStack("false", "false");
    }

    /** Test whether values are equal. Works on integers, strings, symbols,
and Booleans. For any other types (such as blocks), it always returns
false -- even if the values *appear* to be the same.
 */
    @Test
    public void test_eq() {
        // auto-generated from pico-ops.yaml
        assertStack("3 5 eq", "false");
        assertStack("3 3 eq", "true");
        assertStack("(Hi) (Ho) eq", "false");
        assertStack("(Hi) (Hi) eq", "true");
        assertStack("/hi /hit eq", "false");
        assertStack("/hit /hit eq", "true");
        assertStack("true false eq", "false");
        assertStack("true true eq", "true");
        assertStack("{dup} {dup} eq", "false");
    }

    /** Test whether values are **not** equal. Works on integers, strings, symbols,
and Booleans. For any other types (such as blocks), it always returns
true -- even if the values *appear* to be the same.
 */
    @Test
    public void test_ne() {
        // auto-generated from pico-ops.yaml
        assertStack("3 5 ne", "true");
        assertStack("3 3 ne", "false");
        assertStack("(Hi) (Ho) ne", "true");
        assertStack("(Hi) (Hi) ne", "false");
        assertStack("/hi /hit ne", "true");
        assertStack("/hit /hit ne", "false");
        assertStack("true false ne", "true");
        assertStack("true true ne", "false");
        assertStack("{dup} {dup} ne", "true");
    }

    /** Test greater than or equal. Works on integers or strings. Applying to
other types is a runtime error.
 */
    @Test
    public void test_ge() {
        // auto-generated from pico-ops.yaml
        assertStack("3 4 ge", "false");
        assertStack("4 3 ge", "true");
        assertStack("4 4 ge", "true");
        assertStack("(Ha) (Heh) ge", "false");
        assertStack("(Heh) (Ha) ge", "true");
        assertStack("(Ha) (Ha) ge", "true");
    }

    /** Test strictly greater than. Works on integers or strings. Applying to
other types is a runtime error.
 */
    @Test
    public void test_gt() {
        // auto-generated from pico-ops.yaml
        assertStack("3 4 gt", "false");
        assertStack("4 3 gt", "true");
        assertStack("4 4 gt", "false");
        assertStack("(Ha) (Heh) gt", "false");
        assertStack("(Heh) (Ha) gt", "true");
        assertStack("(Ha) (Ha) gt", "false");
    }

    /** Test less than or equal. Works on integers or strings. Applying to
other types is a runtime error.
 */
    @Test
    public void test_le() {
        // auto-generated from pico-ops.yaml
        assertStack("3 4 le", "true");
        assertStack("4 3 le", "false");
        assertStack("4 4 le", "true");
        assertStack("(Ha) (Heh) le", "true");
        assertStack("(Heh) (Ha) le", "false");
        assertStack("(Ha) (Ha) le", "true");
    }

    /** Test strictly less than. Works on integers or strings. Applying to
other types is a runtime error.
 */
    @Test
    public void test_lt() {
        // auto-generated from pico-ops.yaml
        assertStack("3 4 lt", "true");
        assertStack("4 3 lt", "false");
       assertStack("4 4 lt", "false");
       assertStack("(Ha) (Heh) lt", "true");
       assertStack("(Heh) (Ha) lt", "false");
       assertStack("(Ha) (Ha) lt", "false");
    }

    /** Logical and operator. Works only on Booleans.
 */
    @Test
    public void test_and() {
        // auto-generated from pico-ops.yaml
        assertStack("false false and", "false");
        assertStack("false true and", "false");
        assertStack("true false and", "false");
        assertStack("true true and", "true");
    }

    /** Logical or operator. Works only on Booleans.
 */
    @Test
    public void test_or() {
        // auto-generated from pico-ops.yaml
        assertStack("false false or", "false");
        assertStack("false true or", "true");
        assertStack("true false or", "true");
        assertStack("true true or", "true");
    }

    /** Logical not operator. Works only on Booleans. */
    @Test
    public void test_not() {
        // auto-generated from pico-ops.yaml
        assertStack("false not", "true");
        assertStack("true not", "false");
    }
}
